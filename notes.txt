# Lab room 40ft by 19.2ft (400,192)ft/10
# Desk 58inches by 23inches (58, 23)inches
# 

# Matrix for unique id of object
# Matrix for if space is taken (0,1)
# Matrix for open space (without reserved space)
        
# Solution space will be a list of lists. First list iterated through by id, second list iterated by reference id. 
    # Reference id will be assigned based on distance from the bottom left corner of the room. Euclidean distance because of calculating distance between solutions.

# Conflict Types:
        # 1. Static object hit. Dynamic object will move as much as it can.
        # 2. Dynamic object hit. Dynamic objects will have uniform distribution of who gets the space.

# How to find conflicts:
        # 1. Use prime number unique ids, open space will have 1s, movement will multiply new space and divide previous space.
            # Just need to check if prime number in each new position.
        # 2. Use a list of conflict objects. Each object consists of location (x,y) and list of uid with conflicts. If single
            # object is in list, no conflicts.
        
# Value of open space without exhaustive search
    # Grouping distances from objects and walls.





# Type of conflicts:
    # 1. Two object didn't move, but rotation changed. Now overlap.
        # 1.1 Give priority to the object that didn't rotate. Noise search for the other object.
        # 1.2 If both rotated, noisy seperation. Two noise searches at the same time.
    # 2. One object didn't move, but the other did. Now overlap.
        # 1.1 Create noise search, increase noise if failed.
    # 3. Two objects moved, and now overlap.
        # Noise seperation
            
    # Could just perform noisy seperation for all conflicts. Not including things that didn't move
            
# Resolve conflicts
            # NOTES: IF OBJECT HASN'T MOVED, GIVE IT THE POSITION
            # IF ALL OBJECTS HAVE MOVED, EITHER UNIFORM DISTRIBUTION OR GIVE WEIGHT TO CLOSER OBJECTS
    # IDEA: GIVE CORNERS OF OBJECT TO CALCULATE HOW IT'S OVERLAPPING
# IDEA: ADD OBJECTS BACK IN THE ROOM IF NO CONFLICTS OR IF HAVEN'T MOVED. CHECK IF CONTIGUOUS. UPDATE IF NOT. ADD IN CONFLICTING OBJECTS WITH NOISE






To do:
    * Finish set_X function 
        * Need to resolve conflicts
        * If not contiguous, create noise near disconnections
    * Add in contiguous condition for randoming the room
        
    * Check if evaluate is good. Replace if not
        * Check what is wrong with euclidean distance. Some sharp edges remain on map
            * Could be search distance to travel?
    * Maybe add method to check if object is too big for room (with any rotation)
        * or timeout
    * Adjust weighting for rotation to be smaller further away and larger close up



